using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WorkManagementSystem.Utils;
using WorkManagementSystem.Models;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;


namespace WorkManagementSystem.Forms
{
    public partial class CustomersForm : Form
    {
        DataHandler DataHandler = new DataHandler();
        LoginUser _loginUser;
        public CustomersForm(LoginUser user)
        {
            InitializeComponent();
            LoadCustomers();
            _loginUser = user;
        }

        private void LoadCustomers()
        {
            try
            {
                if (customerGridView == null)
                {
                    MessageBox.Show("Error: customerGridView is not initialized.");
                    return;
                }

                customerGridView.Columns.Clear();

                DataTable customerData = DataHandler.getCustomers();

                if (customerData == null || customerData.Rows.Count == 0)
                {
                    MessageBox.Show("No customer data available.");
                    return;
                }

                customerGridView.DataSource = customerData;

                // Optionally hide ID fields
                if (customerGridView.Columns["customerId"] != null)
                    customerGridView.Columns["customerId"].Visible = false;

                if (customerGridView.Columns["addressId"] != null)
                    customerGridView.Columns["addressId"].Visible = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading customers: " + ex.Message);
            }
        }


        private void LoadCityComboBox()
        {
            if (customerGridView.Columns.Contains("City")) return; // Prevent adding the column multiple times

            // Create the ComboBox column for city
            DataGridViewComboBoxColumn cityColumn = new DataGridViewComboBoxColumn
            {
                Name = "City",
                HeaderText = "City",
                DataSource = DataHandler.GetCities(),  // Fetch city list from the database
                DisplayMember = "city",                // Display city name
                ValueMember = "cityId",                // Use cityId as the actual value
                AutoComplete = true                    // Enable autocomplete
            };

            // Add ComboBox to the DataGridView
            customerGridView.Columns.Add(cityColumn);
        }

        private void btnAddCustomer_Click(object sender, EventArgs e)
        {
            // Fetch the list of valid cities from the database
            DataTable validCities = DataHandler.GetCities();
            var cityNames = validCities.AsEnumerable().Select(row => row["city"].ToString()).ToList();

            foreach (DataGridViewRow row in customerGridView.Rows)
            {
                try
                {
                    // null check the customerName so we can ignore the new empty row generated by the gridview
                    string customerName = row.Cells["customerName"].Value.ToString();
                }
                catch (Exception ex)
                {
                    continue;
                }

                // Confirm that the row does not have an ID but does have a customerName (not the new empty row)
                if (string.IsNullOrWhiteSpace(row.Cells["customerId"].Value.ToString())  && !(string.IsNullOrWhiteSpace(row.Cells["customerName"].Value.ToString())))
                {
                    
                    // Trim and validate required fields (name, address, phone, city)
                    string customerName = row.Cells["customerName"].Value?.ToString().Trim();
                    string addressLine1 = row.Cells["address"].Value?.ToString().Trim();
                    string phone = row.Cells["phone"].Value?.ToString().Trim();
                    string postalCode = row.Cells["postalCode"].Value?.ToString().Trim();  // Optional validation for postal code
                    string city = row.Cells["city"].Value?.ToString().Trim();

                    Console.WriteLine("Will anything print");
                    Console.WriteLine("New Address: ", city, postalCode);

                    // Ensure name, address, phone, and city fields are filled out
                    if (string.IsNullOrWhiteSpace(customerName) || string.IsNullOrWhiteSpace(addressLine1) ||
                        string.IsNullOrWhiteSpace(phone) || string.IsNullOrWhiteSpace(city))
                    {
                        MessageBox.Show("Customer name, address, phone, and city must be filled out.");
                        return;
                    }

                    // Validate phone number (only digits and dashes allowed)
                    if (!System.Text.RegularExpressions.Regex.IsMatch(phone, @"^[\d-]+$"))
                    {
                        MessageBox.Show("Phone number can only contain digits and dashes.");
                        return;
                    }

                    // Validate that the city name exists in the database
                    if (!cityNames.Contains(city))
                    {
                        MessageBox.Show($"The city '{city}' does not exist. Please enter a valid city. (Toronto, Oslo, New York, Los Angeles)");
                        return;
                    }

                    Customer customer = new Customer
                    {
                        CustomerName = customerName,
                        Active = true  // Assuming active by default for new customers
                    };

                    Address address = new Address
                    {
                        AddressLine1 = addressLine1,
                        AddressLine2 = row.Cells["address2"].Value?.ToString().Trim(),  // Optional address2
                        PostalCode = postalCode,
                        Phone = phone,
                        CityId = GetCityIdByName(city)  // Retrieve the cityId from the database by name
                    };

                    DataHandler.AddCustomer(customer, address, _loginUser);
                }
            }
            MessageBox.Show("Customer Updated Successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

            LoadCustomers();
        }

        private void btnUpdateCustomer_Click(object sender, EventArgs e)
        {
            if (customerGridView.SelectedRows.Count == 0)
            {
                MessageBox.Show("Error: Please select a row to update in the database.");
                return;
            }
            try
            {
                DataGridViewRow row = customerGridView.SelectedRows[0];

                Customer customer = new Customer
                {
                    CustomerId = (int)row.Cells["customerId"].Value,
                    CustomerName = row.Cells["customerName"].Value.ToString(),
                    Active = true // Assuming active by default
                };

                Address address = new Address
                {
                    AddressId = (int)row.Cells["addressId"].Value,
                    AddressLine1 = row.Cells["address"].Value.ToString(),
                    AddressLine2 = row.Cells["address2"].Value.ToString(),
                    PostalCode = row.Cells["postalCode"].Value.ToString(),
                    Phone = row.Cells["phone"].Value.ToString()
                };

                DataHandler.UpdateCustomer(customer, address);

                // Refresh the grid after update
                LoadCustomers();
                MessageBox.Show("Customer Updated Successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ez)
            {
                MessageBox.Show("Error: Update attempt failed. Details: " + ez.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnDeleteCustomer_Click(object sender, EventArgs e)
        {
            if (customerGridView.SelectedRows.Count == 0)
            {
                MessageBox.Show("Error: Please select a row to delete from the database.");
                return;
            }
            try
            {
                DataGridViewRow row = customerGridView.SelectedRows[0];
                int customerId = (int)row.Cells["customerId"].Value;
                int addressId = (int)row.Cells["addressId"].Value;

                DataHandler.DeleteCustomer(customerId, addressId);
                LoadCustomers();
                MessageBox.Show("Customer Deleted Successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception exvc)
            {
                MessageBox.Show("Error: Delete attempt failed. Details: " + exvc.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private int GetCityIdByName(string cityName)
        {
            DataTable cities = DataHandler.GetCities();  // Fetch the list of cities
            var cityRow = cities.AsEnumerable().FirstOrDefault(row => row["city"].ToString() == cityName);

            if (cityRow != null)
            {
                return Convert.ToInt32(cityRow["cityId"]);  // Return the cityId if found
            }

            throw new Exception($"City '{cityName}' not found.");  // Throw an error if the city doesn't exist
        }


    }
}

